-- STORED PROCEDURES
 
----------- VER LOS ALMACENES DE UNA ADUANA
CREATE OR REPLACE FUNCTION consultarAlmacenesAduana(_idAduana integer)
RETURNS TABLE
  (nombreAduana varchar, nombreAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
	    SELECT distinct "ADUANA"._nombre as "Aduana", "ALMACEN"."_nombreAlmacen" as "Almacen"
		FROM "ADUANA"
		INNER JOIN "ALMACEN"
		ON "ADUANA"._ID = "ALMACEN"."_fkAduanaAlmacen"
		WHERE "ADUANA"._ID=_idAduana;	
	
END;
$$ LANGUAGE plpgsql;
-------
------- SEGUNDA FORMA DE HACERLO
CREATE OR REPLACE FUNCTION consultarAlmacenesAduana(_idAduana integer)
RETURNS TABLE
  (nombreAduana varchar, nombreAlmacen varchar)
AS $$
DECLARE
   var_r record;
BEGIN
	
	FOR var_r IN(SELECT distinct "ADUANA"._nombre as "Aduana", "ALMACEN"."_nombreAlmacen" as "Almacen"
		FROM "ADUANA"
		INNER JOIN "ALMACEN"
		ON "ADUANA"._ID = "ALMACEN"."_fkAduanaAlmacen"
		WHERE "ADUANA"._ID=_idAduana)	
	LOOP
		nombreAduana = var_r."Aduana";
		nombreAlmacen = var_r."Almacen";
	    RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-----------------------------------------------------------------------------------

----------- CONSULTAR LA ADUANA DADO EL ALMACEN -----------------
CREATE OR REPLACE FUNCTION consultarAduana(idAlmacen integer)
RETURNS TABLE
  (idAduanaAlmacen integer, codAduana varchar, nombreAduana varchar, 
   codAlmacen integer, nombreAlmacen varchar, direccionAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
	    SELECT AD._ID ,AD._CODIGO AS "cod_aduana", AD._NOMBRE AS "nombre_aduana",
		AL._ID AS "cod_almacen", AL."_nombreAlmacen" AS "nombre_almacen", AL."_direccion" as "direccion_almacen"
		FROM "ADUANA" AD
		INNER JOIN "ALMACEN" AL ON AL."_fkAduanaAlmacen" = AD._ID
		WHERE AL._ID =idAlmacen;		
END;
$$ LANGUAGE plpgsql;

--------------- CONSULTAR TODAS LAS ADUANAS --------------------
CREATE OR REPLACE FUNCTION consultarTodasAduana()
RETURNS TABLE
  (idAduanaAlmacen integer, codAduana varchar, nombreAduana varchar)
AS $$
BEGIN	
	RETURN QUERY
	   SELECT AD._ID ,AD._CODIGO AS "cod_aduana", AD._NOMBRE AS "nombre_aduana"
	   FROM "ADUANA" AS AD;		
END;
$$ LANGUAGE plpgsql;

-----------------------------------------------------------
--------------- CONSULTAR TDOSS LOS ALMACENES --------------------
CREATE OR REPLACE FUNCTION consultarTodosAlmacenes()
RETURNS TABLE
  (idAlmacen integer, nombreAlmacen varchar, direccion varchar)
AS $$
BEGIN	
	RETURN QUERY
	   SELECT AL._ID AS "cod_almacen", AL."_nombreAlmacen" AS "nombre_almacen", AL._DIRECCION AS "Direccion"
	   FROM "ALMACEN" AS AL;		
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------------------------------

-- VER LOS CLIENTES DE UN ADMINISTRADOR
CREATE OR REPLACE FUNCTION consultarClientesAdministrador(_idAdministrador integer)
RETURNS TABLE
  (codAdministrador integer, nombreAdminstrador varchar,
   codCliente integer, nombreCliente varchar, nombreUsuario varchar, correo varchar, fechaRegistro date)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct ad._ID , ad._NOMBRE,
		cl._ID ,cl._NOMBRE, cl."_nombreUsuario", cl."_correo", cl."_fechaRegistro"
		FROM "ADMINISTRADOR" as ad
		INNER JOIN "CLIENTE" as cl
		ON ad._ID = cl."_fkAdminCliente"
		WHERE ad._ID=_idAdministrador;	
END;
$$ LANGUAGE plpgsql;

------------------------ENTRADAS ------------------------
---------CLIENTE ------------
-- VER LAS ENTRADAS CON DETALLE DE UN CLIENTE EN ESPECIFICO POR SU ID
CREATE OR REPLACE FUNCTION consultarEntradasCliente(idCliente integer)
RETURNS TABLE
  (codClienteEntrada integer, fechaEntrada Date, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, 
   disponible bool, codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct C._ID as "cod_clienteEntrada", E."_fechaEntrada", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "ENTRADA" AS E
		INNER JOIN "PRODUCTO" AS P ON E._ID = P."_fkEntradaProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = E."_fkAlmacenEntrada"
		WHERE C._ID =idCliente
		ORDER BY E."_fechaEntrada";	
END;
$$ LANGUAGE plpgsql;

------- ADMINISTRADOR -----
-- CONSULTA TODAS LAS ENTRADAS
CREATE OR REPLACE FUNCTION consultarTodasEntradas()
RETURNS TABLE
  (codClienteEntrada integer, fechaEntrada Date, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, 
   disponible bool, nombreCliente varchar,correoCliente varchar, codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct C._ID as "cod_clienteEntrada", E."_fechaEntrada", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		C._NOMBRE, C._CORREO,
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "ENTRADA" AS E
		INNER JOIN "PRODUCTO" AS P ON E._ID = P."_fkEntradaProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = E."_fkAlmacenEntrada"
		ORDER BY C._NOMBRE;
	END;
$$ LANGUAGE plpgsql;

------------------------SALIDAS ------------------------
-- CLIENTE ---
-- VER LAS SALIDAS CON DETALLE DE UN CLIENTE EN ESPECIFICO POR SU ID
CREATE OR REPLACE FUNCTION consultarSalidasCliente(idCliente integer)
RETURNS TABLE
  (codClienteSalida integer, fechaSalida Date, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, 
   disponible bool, codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct C._ID as "cod_clienteSalida", S."_fechaSalida", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "SALIDA" AS S
		INNER JOIN "PRODUCTO" AS P ON S._ID = P."_fkSalidaProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = S."_fkAlmacenSalida"
		WHERE C._ID = idCliente
		ORDER BY S."_fechaSalida";	
END;
$$ LANGUAGE plpgsql;

------- ADMINISTRADOR -----
-- CONSULTA TODAS LAS SALIDAS
CREATE OR REPLACE FUNCTION consultarTodasSalidas()
RETURNS TABLE
  (codClienteSalida integer, fechaSalida Date, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, 
   disponible bool, nombreCliente varchar,correoCliente varchar, codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct C._ID as "cod_clienteSalida", S."_fechaSalida", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		C._NOMBRE, C._CORREO,
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "SALIDA" AS S
		INNER JOIN "PRODUCTO" AS P ON S._ID = P."_fkSalidaProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = S."_fkAlmacenSalida"
		ORDER BY C._NOMBRE;
END;
$$ LANGUAGE plpgsql;

------------------------PEDIDOS ------------------------

-- VER LAS PEDIDOS CON DETALLE DE UN CLIENTE EN ESPECIFICO POR SU ID
--CLIENTES---
CREATE OR REPLACE FUNCTION consultarPedidosCliente(idCliente integer)
RETURNS TABLE
  (codClientePedido integer, fechaSolicitud Date, fechaEntrega Date, estadoPedido varchar, 
   destinatario varchar, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, disponible bool,
   codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct PE._ID as "cod_pedido", PE."_fechaSolicitud", PE."_fechaEntrega", PE."_estadoPedido", PE."_destinatario", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "PEDIDO" AS PE
		INNER JOIN "PRODUCTO" AS P ON PE._ID = P."_fkPedidoProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = PE."_fkAlmacenPedido"		
		WHERE C._ID =idCliente
		ORDER BY  PE."_fechaSolicitud";
END;
$$ LANGUAGE plpgsql;

--ADMINISTRADOR --
CREATE OR REPLACE FUNCTION consultarTodosPedidos()
RETURNS TABLE
  (codClientePedido integer, fechaSolicitud Date, fechaEntrega Date, estadoPedido varchar, 
   destinatario varchar, codProducto integer, descripcion varchar, lote varchar, estadoCalidad varchar, disponible bool,
   nombreCliente varchar,correoCliente varchar, codAlmacen integer, nombreAlmacen varchar, dirAlmacen varchar)
AS $$
BEGIN	
	RETURN QUERY
		SELECT distinct PE._ID as "cod_ClientePedido", PE."_fechaSolicitud", PE."_fechaEntrega", PE."_estadoPedido", PE."_destinatario", 
		P._ID as "cod_producto",P._DESCRIPCION, P._LOTE, P."_estadoCalidad" , P._disponible , 
		C._NOMBRE, C._CORREO,
		AL._ID as "cod_almacen", AL."_nombreAlmacen", AL."_direccion" as "DireccionAlmacen"
		FROM "PEDIDO" AS PE
		INNER JOIN "PRODUCTO" AS P ON PE._ID = P."_fkPedidoProducto"
		INNER JOIN "CLIENTE" AS C ON C._ID = P."_fkClienteProducto"
		INNER JOIN "ALMACEN" AS AL ON AL._ID = PE."_fkAlmacenPedido"
		ORDER BY C._NOMBRE;
		END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------------------------------
-- DROPS FUNCTION
DROP FUNCTION consultaralmacenesaduana(integer);
DROP FUNCTION consultarentradascliente(integer);
DROP FUNCTION consultarsalidascliente(integer);
DROP FUNCTION consultarPedidosCliente(integer);
DROP FUNCTION consultartodosalmacenes();
DROP FUNCTION consultarclientesadministrador(integer)
-- CONSULTAS Y LLAMADA A LAS FUNCIONES

select * from consultarAlmacenesAduana(2);
select * from consultarAduana(2);
select * from consultarTodasAduana();
select * from consultarTodosAlmacenes();
select * from consultarClientesAdministrador(10);
select * from consultarEntradasCliente(29);
select * from consultarTodasEntradas();
select * from consultarSalidasCliente(10);
select * from consultarTodasSalidas();
select * from consultarPedidosCliente(28);
select * from consultarTodosPedidos();